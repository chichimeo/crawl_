package malware

import (
	"encoding/json"
	"io/ioutil"
	"net/http"
	"strconv"

	"github.com/gorilla/mux"
	"gopkg.in/mgo.v2/bson"
)

func CreateData(w http.ResponseWriter, r *http.Request) {
	col, close := NewCollection()
	defer close()
	var newData Malware
	reqBody, err := ioutil.ReadAll(r.Body)
	if err != nil {
		w.WriteHeader(http.StatusNotFound)
		json.NewEncoder(w).Encode(map[string]interface{}{
			"message": err.Error(),
		})
		return
	}
	json.Unmarshal(reqBody, &newData)

	err = col.Insert(newData)
	if err != nil {
		w.WriteHeader(http.StatusServiceUnavailable)
		json.NewEncoder(w).Encode(map[string]interface{}{
			"message": err.Error(),
		})
		return
	}

	json.NewEncoder(w).Encode(http.StatusCreated)
}

func UpdateDataPut(w http.ResponseWriter, r *http.Request) {
	col, close := NewCollection()
	defer close()
	var newData Malware
	reqBody, err := ioutil.ReadAll(r.Body)
	if err != nil {
		json.NewEncoder(w).Encode(http.StatusNotFound)
		return
	}
	json.Unmarshal(reqBody, &newData)

	hash := mux.Vars(r)["hash"]
	err = col.Update(bson.M{"_id": bson.ObjectIdHex(hash)}, bson.M{"md5": newData.Md5, "sha1": newData.Sha1, "sha256": newData.Sha256, "date": newData.Date})
	if err != nil {
		json.NewEncoder(w).Encode(http.StatusNotFound)
		return
	}
	json.NewEncoder(w).Encode(http.StatusCreated)
}

func UpdateDataPatch(w http.ResponseWriter, r *http.Request) {
	col, close := NewCollection()
	defer close()
	var newData Malware
	reqBody, err := ioutil.ReadAll(r.Body)
	if err != nil {
		json.NewEncoder(w).Encode(http.StatusNotFound)
		return
	}
	json.Unmarshal(reqBody, &newData)

	hash := mux.Vars(r)["hash"]

	err = col.Update(bson.M{"_id": bson.ObjectIdHex(hash)}, bson.M{"$set": bson.M{
		"md5": newData.Md5, "sha1": newData.Sha1, "sha256": newData.Sha256, "date": newData.Date}})
	if err != nil {
		json.NewEncoder(w).Encode(http.StatusNotFound)
		return
	}
	json.NewEncoder(w).Encode(http.StatusCreated)
}

func DeleteData(w http.ResponseWriter, r *http.Request) {
	col, close := NewCollection()
	defer close()
	hash := mux.Vars(r)["hash"]

	err := col.Remove(bson.M{"_id": bson.ObjectIdHex(hash)})
	if err != nil {
		json.NewEncoder(w).Encode(http.StatusServiceUnavailable)
		return
	}
	json.NewEncoder(w).Encode(http.StatusAccepted)
}

func GetOneByMd5(w http.ResponseWriter, r *http.Request) {
	col, close := NewCollection()
	defer close()
	data := new(Malware)
	hash := mux.Vars(r)["hash"]

	err := col.Find(bson.M{"md5": hash}).One(data)

	if err != nil {
		json.NewEncoder(w).Encode(http.StatusServiceUnavailable)
		return
	}
	json.NewEncoder(w).Encode(data)

}
func GetOneBySha1(w http.ResponseWriter, r *http.Request) {
	col, close := NewCollection()
	defer close()
	data := new(Malware)
	hash := mux.Vars(r)["hash"]

	err := col.Find(bson.M{"sha1": hash}).One(data)

	if err != nil {
		json.NewEncoder(w).Encode(http.StatusServiceUnavailable)
		return
	}
	json.NewEncoder(w).Encode(data)
}

func GetOneBySha256(w http.ResponseWriter, r *http.Request) {
	col, close := NewCollection()
	defer close()
	data := new(Malware)
	hash := mux.Vars(r)["hash"]

	err := col.Find(bson.M{"sha256": hash}).One(data)

	if err != nil {
		json.NewEncoder(w).Encode(http.StatusServiceUnavailable)
		return
	}
	json.NewEncoder(w).Encode(data)
}

func GetByID(w http.ResponseWriter, r *http.Request) {
	col, close := NewCollection()
	defer close()
	data := new(Malware)
	hash := mux.Vars(r)["id"]

	err := col.Find(bson.M{"_id": bson.ObjectIdHex(hash)}).One(data)

	if err != nil {
		json.NewEncoder(w).Encode(http.StatusServiceUnavailable)
		return
	}
	json.NewEncoder(w).Encode(data)
}

func GetMalwares(w http.ResponseWriter, r *http.Request) {
	col, close := NewCollection()
	defer close()
	var data []Malware

	page, _ := strconv.Atoi(r.URL.Query().Get("page"))
	limit, _ := strconv.Atoi(r.URL.Query().Get("limit"))

	err := col.Find(bson.M{}).Skip((page - 1) * limit).Limit(limit).All(&data)

	if err != nil {
		json.NewEncoder(w).Encode(http.StatusServiceUnavailable)
		return
	}
	json.NewEncoder(w).Encode(data)

}
