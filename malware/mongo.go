package malware

import (
	"gopkg.in/mgo.v2"
	"gopkg.in/mgo.v2/bson"
)

type MongoRepository struct {
	db             *mgo.Database
	collectionName string
}

func NewMongoRepository(db *mgo.Database) MongoRepository {
	repo := (MongoRepository{db, MongoCollection})
	return repo
}
func (repo MongoRepository) collection() *mgo.Collection {
	return repo.db.C(repo.collectionName)
}

const MongoCollection = "malware"

func (repo MongoRepository) Insert(mal Malware) error {
	err := repo.collection().Insert(mal)
	return err
}

func (repo MongoRepository) List(skip int, limit int) ([]Malware, error) {
	mal := make([]Malware, 0)
	err := repo.collection().Find(bson.M{}).Skip(skip).Limit(limit).All(&mal)
	return mal, err

}

func (repo MongoRepository) Delete(id string) error {
	err := repo.collection().Remove(bson.M{"_id": bson.ObjectIdHex(id)})
	return err
}

func (repo MongoRepository) FindByID(id string) (Malware, error) {
	var result Malware
	err := repo.collection().Find(bson.M{"_id": bson.ObjectIdHex(id)}).One(&result)
	return result, err
}

func (repo MongoRepository) FindByMd5(md5 string) (Malware, error) {
	var result Malware
	err := repo.collection().Find(bson.M{"md5": md5}).One(&result)
	return result, err
}

func (repo MongoRepository) FindBySha1(sha1 string) (Malware, error) {
	var result Malware
	err := repo.collection().Find(bson.M{"sha1": sha1}).One(&result)
	return result, err
}

func (repo MongoRepository) FindBySha256(sha256 string) (Malware, error) {
	var result Malware
	err := repo.collection().Find(bson.M{"sha256": sha256}).One(&result)
	return result, err
}

func (repo MongoRepository) Update(id string, mal Malware) error {
	err := repo.collection().Update(bson.M{"_id": bson.ObjectIdHex(id)}, bson.M{"md5": mal.Md5, "sha1": mal.Sha1, "sha256": mal.Sha256, "date": mal.Date})
	return err
}
